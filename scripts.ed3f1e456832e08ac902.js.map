{"version":3,"file":"scripts.ed3f1e456832e08ac902.js","mappings":"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","sources":["webpack://simple-layout/./src/js/main.js","webpack://simple-layout/webpack/bootstrap","webpack://simple-layout/webpack/runtime/compat get default export","webpack://simple-layout/webpack/runtime/define property getters","webpack://simple-layout/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["class CurrentCell {\r\n  constructor() {\r\n    this.CurrentCell = '';\r\n    this.MovesList = '';\r\n    this.MovesFlag = false;\r\n    this.Turn = true;\r\n    this.AllowedToMove = false;\r\n    this.FieldList = '';\r\n    this.FigureList = '';\r\n    this.ClickedIdCell = '';\r\n    this.ClickedCell = '';\r\n    this.ActiveIdCell = '';\r\n    this.Game = [];\r\n    this.SelectedFigure = null;\r\n    this.FlagIfFigure = false;\r\n    this.RegCell = new RegExp('\\\\d+');\r\n  }\r\n\r\n  clearObject() {\r\n    this.SelectedFigure = null;\r\n    this.MovesList = null;\r\n    this.AllowedToMove = false;\r\n    this.Turn = true;\r\n    this.ActiveIdCell = '';\r\n  }\r\n\r\n  transformToPosition(element) {\r\n    let split = element.split('-')[1],\r\n      coord = split.split('');\r\n    this.ClickedCell = new FigurePosition(\r\n      parseInt(coord[1]),\r\n      parseInt(coord[0])\r\n    );\r\n    this.setClickedIdCell();\r\n  }\r\n\r\n  setClickedIdCell() {\r\n    // let a = this.SelectedFigure.Position.Y + \"\" + this.SelectedFigure.Position.X;\r\n    if (this.ClickedIdCell != null)\r\n      this.ClickedIdCell =\r\n        'cell-' + this.ClickedCell.Y + '' + this.ClickedCell.X;\r\n  }\r\n  setActiveIdCell() {\r\n    // let a = this.SelectedFigure.Position.Y + \"\" + this.SelectedFigure.Position.X;\r\n    if (this.SelectedFigure != null)\r\n      this.ActiveIdCell =\r\n        'cell-' +\r\n        this.SelectedFigure.Position.Y +\r\n        '' +\r\n        this.SelectedFigure.Position.X;\r\n  }\r\n\r\n  setFigure() {\r\n    let buf = this.Game.GetFigureAt(this.ClickedCell);\r\n    if (buf != null) {\r\n      this.SelectedFigure = buf;\r\n      this.setActiveIdCell();\r\n      this.MovesList = this.Game.GetMoves(this.SelectedFigure.Position);\r\n    } else {\r\n      this.SelectedFigure = null;\r\n    }\r\n  }\r\n\r\n  testElement(e) {\r\n    let element = null;\r\n    if (e.target.parentNode.classList[0] == 'cell')\r\n      element = e.target.parentNode.id;\r\n    else if (this.RegCell.test(e.target.id)) element = e.target.id;\r\n    return element;\r\n  }\r\n\r\n  testIfCell(e) {\r\n    let element = this.testElement(e);\r\n    if (element != null) {\r\n      this.transformToPosition(element);\r\n      if (this.SelectedFigure == null) this.setFigure();\r\n      return true;\r\n    } else {\r\n      this.SelectedFigure = null;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  checkIfFigure(position) {\r\n    let a = this.FigureList.filter((item) => {\r\n      return (\r\n        item.FigurePosition.X == position.X &&\r\n        item.FigurePosition.Y == position.Y\r\n      );\r\n    });\r\n    this.CurrentCell = a;\r\n  }\r\n\r\n  comparePositions(a, b) {\r\n    return a.X == b.X && a.Y == b.Y;\r\n  }\r\n\r\n  checkMovesList() {\r\n    this.MovesFlag = [];\r\n    let checkMove = false;\r\n    for (let i = 0; i < this.MovesList.length; i++) {\r\n      if (this.comparePositions(this.MovesList[i], this.ClickedCell)) {\r\n        checkMove = true;\r\n        break;\r\n      } else {\r\n        checkMove = false;\r\n      }\r\n    }\r\n    this.comparePositions(this.ClickedCell, this.SelectedFigure.Position)\r\n      ? (checkMove = true)\r\n      : 0;\r\n    return checkMove;\r\n  }\r\n}\r\n\r\nclass ChessAI {\r\n  constructor(figures) {\r\n    this.price = 0;\r\n    this.stepCount = 0;\r\n    // this.Figures = [];\r\n    this.Figures = JSON.parse(JSON.stringify(figures));\r\n    // this.Figures = Object.assign({}, figures);\r\n    // this.Figures = [...figures];\r\n    this.BestPices = [];\r\n    this.AllPices = [];\r\n  }\r\n\r\n  copyArr(figures) {\r\n    this.Figures.push(figures);\r\n  }\r\n\r\n  // ChessFigure Figures { get; }\r\n  // public int price = 0;\r\n  // public int stepCount = 0;\r\n  // public ChessAI(ChessFigure figures)\r\n  // {\r\n  //     Figures = figures;\r\n  // }\r\n  // public List<int> BestPices;\r\n  // public List<int> AllPices;\r\n\r\n  // ChessAI(figures) {\r\n  //   this.Figures = figures;\r\n  // }\r\n\r\n  MiniaxRoot(depth, color) {\r\n    this.AllPices = [];\r\n    this.BestPices = [];\r\n    let bestMove = -9999,\r\n      bestMoveFound = [],\r\n      figures = new ChessFigure(),\r\n      FM = [],\r\n      a = 0;\r\n    figures.ChessFigure();\r\n    figures.ChessFigureAi(this.Figures);\r\n    FM = figures.GetAllFiguresMoves(color);\r\n    let rand = FM[[Math.floor(Math.random() * FM.length)]];\r\n    for (let i = 0; i < FM.length; i++) if (FM[i].Figure.Color) a++;\r\n    for (let i = 0; i < FM.length; i++) {\r\n      let newGameMove = new FiguresMoves(FM[i].Figure, FM[i].Position);\r\n\r\n      figures.MoveCurrentFigure(\r\n        newGameMove.Figure.Position,\r\n        newGameMove.Position\r\n      );\r\n      let value = this.Minimax(depth - 1, figures, !color);\r\n      figures.Undo();\r\n      if (value >= bestMove) {\r\n        this.BestPices.push(value);\r\n        bestMove = value;\r\n        this.price = value;\r\n        bestMoveFound = newGameMove;\r\n      }\r\n    }\r\n    let checkFig = figures.GetFigureAt(bestMoveFound.Position);\r\n    if (checkFig != null) return bestMoveFound;\r\n    else return rand;\r\n    // checkFig==null?return rand:return bestMoveFound;\r\n    // return rand;\r\n  }\r\n\r\n  Minimax(depth, fig, Maximaise) {\r\n    this.stepCount++;\r\n    if (depth == 0) {\r\n      this.AllPices.push(-this.EvaluateBoard(fig));\r\n      return -this.EvaluateBoard(fig);\r\n    }\r\n    let figures = new ChessFigure();\r\n    figures.ChessFigure();\r\n    figures.ChessFigureAi(fig);\r\n\r\n    if (Maximaise) {\r\n      let FM = figures.GetAllFiguresMoves(false);\r\n      let bestMove = -9999;\r\n      for (let i = 0; i < FM.length; i++) {\r\n        figures.MoveCurrentFigure(FM[i].Figure.Position, FM[i].Position);\r\n        bestMove = Math.max(\r\n          bestMove,\r\n          this.Minimax(depth - 1, figures, !Maximaise)\r\n        );\r\n        figures.Undo();\r\n      }\r\n      this.AllPices.push(bestMove);\r\n      return bestMove;\r\n    } else {\r\n      let bestMove = 9999;\r\n      let FM = figures.GetAllFiguresMoves(false);\r\n      for (let i = 0; i < FM.length; i++) {\r\n        figures.MoveCurrentFigure(FM[i].Figure.Position, FM[i].Position);\r\n        bestMove = Math.min(\r\n          bestMove,\r\n          this.Minimax(depth - 1, figures, !Maximaise)\r\n        );\r\n        figures.Undo();\r\n      }\r\n      this.AllPices.push(bestMove);\r\n      return bestMove;\r\n    }\r\n  }\r\n\r\n  EvaluateBoard(figArr) {\r\n    let totalEvaluation = 0;\r\n    for (let i = 0; i < figArr.figureArray.length; i++) {\r\n      if (figArr.figureArray[i].IsAlive)\r\n        totalEvaluation =\r\n          totalEvaluation + 100 * this.GetPieceValue(figArr.figureArray[i]);\r\n    }\r\n    return totalEvaluation;\r\n  }\r\n\r\n  GetPieceValue(f) {\r\n    return f.Color ? -f.Dignity : f.Dignity;\r\n  }\r\n}\r\n\r\nclass FiguresMoves {\r\n  // Figure Figure { get; set; }\r\n  // FigurePosition Position { get; set; }\r\n  //pasition = isPassed isPassed = pasition\r\n  constructor(figure, position) {\r\n    this.array = this.getFigureAttr(figure);\r\n    this.Figure = new Figure(\r\n      this.array[0],\r\n      this.array[1],\r\n      this.array[2],\r\n      this.array[4],\r\n      this.array[3]\r\n    );\r\n    this.Position = new FigurePosition(position.X, position.Y);\r\n  }\r\n  getFigureAttr(_figure) {\r\n    let arr = [\r\n      _figure.Color,\r\n      _figure.IsAlive,\r\n      _figure.Dignity,\r\n      _figure.Position,\r\n      _figure.IsPassed,\r\n    ];\r\n    return arr;\r\n  }\r\n}\r\n\r\nclass ChessFigure {\r\n  // int MAX_SIZE = 7, min = 0;\r\n  // int[] SizeArr = new int[] { min, MAX_SIZE, min, MAX_SIZE };\r\n  // int[] DignitysArray = { 4, 2, 3, 5, 6, 3, 2, 4 };\r\n\r\n  // List<Figure> figureArray;\r\n  // List<Figure> copyFigureArray;\r\n  // List<Figure> FigureArray { get { return figureArray; } }\r\n\r\n  // List<List<Field>> copyFieldReserved;\r\n  // List<List<Field>> this.figureArray;\r\n\r\n  // FigurePosition[] roqueAcceptedMoves;\r\n\r\n  constructor() {\r\n    this.MAX_SIZE = 7;\r\n    this.min = 0;\r\n    this.FieldReserved = [];\r\n    this.roqueAcceptedMoves = [];\r\n    this.copyFigureArray = [];\r\n    this.copyFieldReserved = [];\r\n    this.figureArray = [];\r\n    this.DignitysArray = [4, 2, 3, 5, 6, 3, 2, 4];\r\n    this.SizeArr = [this.min, this.MAX_SIZE, this.min, this.MAX_SIZE];\r\n  }\r\n\r\n  // ChessFigure(Ai) {\r\n  //   figureArray = [];\r\n  //   for (let i = 0; i < Ai.figureArray.length; i++) {\r\n  //     let o = Ai.figureArray[i];\r\n  //     figureArray.push(new Figure(o));\r\n  //   }\r\n  //   this.FieldReserved = [];\r\n  //   this.FieldReserved = DeepCopyField(Ai.FieldReserved);\r\n  //   this.copyFigureArray = DeepCopyFigure(figureArray);\r\n  //   this.copyFieldReserved = DeepCopyField(FieldReserved);\r\n  // }\r\n\r\n  getFigureAttr(_figure) {\r\n    let pos = new FigurePosition(_figure.Position.x, _figure.Position.y);\r\n    let arr = [\r\n      _figure.Color,\r\n      _figure.IsAlive,\r\n      _figure.Dignity,\r\n      pos,\r\n      _figure.IsPassed,\r\n    ];\r\n    return arr;\r\n  }\r\n\r\n  makeDeepFigure(array) {\r\n    let copy = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      let parse = this.getFigureAttr(JSON.parse(JSON.stringify(array[i])));\r\n      // let o = this.getFigureAttr(array.figureArray[i]);\r\n      copy.push(new Figure(parse[0], parse[1], parse[2], parse[4], parse[3]));\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  makeDeepField(array) {\r\n    let copy = [],\r\n      row = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      row = [];\r\n      // for (let j = 0; j <= this.MAX_SIZE; j++) {\r\n      //   row.push(second[i][j]);\r\n      // }\r\n      copy = [...array[i]];\r\n      // first.push(row);\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  ChessFigureAi(Ai) {\r\n    this.figureArray = [];\r\n    this.figureArray = this.makeDeepFigure(Ai.figureArray);\r\n    // for (let i = 0; i < Ai.figureArray.length; i++) {\r\n    //   let o = this.getFigureAttr(Ai.figureArray[i]);\r\n    //   this.figureArray.push(new Figure(o[0], o[1], o[2], o[4], o[3]));\r\n    // }\r\n    this.FieldReserved = [];\r\n    this.FieldReserved = this.DeepCopyField(Ai.FieldReserved);\r\n    this.copyFigureArray = this.DeepCopyFigure(this.figureArray);\r\n    this.copyFieldReserved = this.DeepCopyField(this.FieldReserved);\r\n  }\r\n\r\n  ChessFigure() {\r\n    let row = [];\r\n    for (let i = 0; i <= this.MAX_SIZE; i++) {\r\n      row = [];\r\n      for (let k = 0; k <= this.MAX_SIZE; k++) {\r\n        row.push(new Field(false, false));\r\n      }\r\n      this.FieldReserved.push(row);\r\n    }\r\n    let color = false;\r\n    this.figureArray = this.InitFigArray(color);\r\n    let darkColor = this.InitFigArray(!color);\r\n    for (let i = 0; i < darkColor.length; i++) {\r\n      this.figureArray.push(darkColor[i]);\r\n    }\r\n    return this.figureArray;\r\n  }\r\n\r\n  // zaz() {\r\n  //   alert(\"3\");\r\n  // }\r\n\r\n  findStart() {\r\n    let start = 0;\r\n    for (let i = 0; i < this.figureArray.length; i++) {\r\n      if (this.figureArray[i].Color) {\r\n        start = i;\r\n        break;\r\n      }\r\n    }\r\n    return start;\r\n  }\r\n\r\n  GetAllFiguresMoves(Color) {\r\n    let allMoves = [];\r\n    let getTrueStart = this.findStart();\r\n    let count = !Color ? getTrueStart : this.figureArray.length,\r\n      start = !Color ? 0 : getTrueStart;\r\n\r\n    for (let i = start; i < count; i++) {\r\n      if (this.figureArray[i].IsAlive) {\r\n        let moves = this.GetMoves(this.figureArray[i].Position);\r\n        if (moves != null)\r\n          for (let j = 0; j < moves.length; j++)\r\n            allMoves.push(new FiguresMoves(this.figureArray[i], moves[j]));\r\n      }\r\n    }\r\n    return allMoves;\r\n  }\r\n\r\n  InitFigArray(color) {\r\n    let j = color ? 0 : 7,\r\n      reserved = !color ? true : false,\r\n      enemy = color ? true : false,\r\n      ArrayFig = [];\r\n    for (let i = 0; i <= this.MAX_SIZE; i++) {\r\n      let k = color ? j + 1 : j - 1;\r\n      ArrayFig.push(\r\n        new Figure(\r\n          color,\r\n          true,\r\n          EDignity.Pawn,\r\n          false,\r\n          new FigurePosition(i, color ? j + 1 : j - 1)\r\n        )\r\n      );\r\n      this.FieldReserved[i][color ? j + 1 : j - 1] = new Field(reserved, enemy);\r\n    }\r\n\r\n    for (let i = 0; i <= this.MAX_SIZE; i++) {\r\n      ArrayFig.push(\r\n        new Figure(\r\n          color,\r\n          true,\r\n          this.DignitysArray[i],\r\n          false,\r\n          new FigurePosition(i, j)\r\n        )\r\n      );\r\n      this.FieldReserved[i][j] = new Field(reserved, enemy);\r\n    }\r\n\r\n    return ArrayFig;\r\n  }\r\n\r\n  DeepCopyFigure(second) {\r\n    let first = [];\r\n    for (let i = 0; i < second.length; i++) {\r\n      let parse = this.getFigureAttr(JSON.parse(JSON.stringify(second[i])));\r\n      // let o = this.getFigureAttr(array.figureArray[i]);\r\n      first.push(new Figure(parse[0], parse[1], parse[2], parse[4], parse[3]));\r\n    }\r\n    return first;\r\n    // let first = [];\r\n    // for (let i = 0; i < second.length; i++) {\r\n    //   let o = this.getFigureAttr(second[i]);\r\n    //   first.push(new Figure(o[0], o[1], o[2], o[4], o[3]));\r\n    //   // first.push(second[i]);\r\n    // }\r\n    // // first.push(...second);\r\n    // // second.forEach((item) => {\r\n    // //   first.push(new Figure(item));\r\n    // // });\r\n    // return first;\r\n  }\r\n\r\n  DeepCopyField(second) {\r\n    let first = [],\r\n      row = [];\r\n    for (let i = 0; i < second.length; i++) {\r\n      row = [...second[i]];\r\n      first.push(row);\r\n    }\r\n    return first;\r\n    // let first = [],\r\n    //   row;\r\n    // for (let i = 0; i < second.length; i++) {\r\n    //   row = [];\r\n    //   for (let j = 0; j <= this.MAX_SIZE; j++) {\r\n    //     row.push(second[i][j]);\r\n    //   }\r\n    //   first.push(row);\r\n    // }\r\n    // // first.push(...second);\r\n    // return first;\r\n  }\r\n\r\n  Undo() {\r\n    this.figureArray = this.DeepCopyFigure(this.copyFigureArray);\r\n    this.FieldReserved = this.DeepCopyField(this.copyFieldReserved);\r\n  }\r\n\r\n  GetFigureAt(currentFigPosition) {\r\n    for (let i = 0; i < this.figureArray.length; i++) {\r\n      let a = this.figureArray[i].Position;\r\n      let b = currentFigPosition;\r\n      let check =\r\n        this.figureArray[i].Position.X == currentFigPosition.X &&\r\n        this.figureArray[i].Position.Y == currentFigPosition.Y &&\r\n        this.figureArray[i].IsAlive;\r\n      if (check) return this.figureArray[i];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  RemoveFigureAt(currentFigPosition) {\r\n    for (let i = 0; i < this.figureArray.length; i++) {\r\n      let check1 = this.figureArray[i].Position.X == currentFigPosition.X;\r\n      let check2 = this.figureArray[i].Position.Y == currentFigPosition.Y;\r\n      let check3 = this.figureArray[i].IsAlive;\r\n      if (check1 && check2 && check3) {\r\n        this.figureArray.splice(i, 1);\r\n        // return this.figureArray[i];\r\n      }\r\n    }\r\n    // return null;\r\n  }\r\n\r\n  Roque(curFigure, acceptedPosition) {\r\n    if (\r\n      curFigure.Dignity == 6 &&\r\n      curFigure.IsRoque &&\r\n      (acceptedPosition == roqueAcceptedMoves[0] ||\r\n        acceptedPosition == roqueAcceptedMoves[1])\r\n    ) {\r\n      rook =\r\n        acceptedPosition.X < curFigure.Position.X\r\n          ? this.GetFigureAt(new FigurePosition(0, curFigure.Position.Y))\r\n          : this.GetFigureAt(new FigurePosition(7, curFigure.Position.Y));\r\n      if (rook != null) {\r\n        if (!curFigure.IsPassed && !rook.IsPassed) {\r\n          roquePosition = getRoquePosition(curFigure, rook);\r\n          this.moveFigure(curFigure, roquePosition[0]);\r\n          this.moveFigure(rook, roquePosition[1]);\r\n          curFigure.IsRoque = false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  MoveCurrentFigure(currentFigPosition, acceptedPosition) {\r\n    let curFigure = this.GetFigureAt(currentFigPosition);\r\n\r\n    if (curFigure.IsAlive) {\r\n      // copyFigureArray = this.DeepCopyFigure(this.figureArray);\r\n      // copyFieldReserved = this.DeepCopyField(this.figureArray);\r\n      if (!this.Roque(curFigure, acceptedPosition))\r\n        this.moveFigure(curFigure, acceptedPosition);\r\n    }\r\n  }\r\n\r\n  moveFigure(curFigure, acceptedPosition) {\r\n    let enemy = this.GetFigureAt(acceptedPosition);\r\n    if (enemy != null && enemy.Color != curFigure.Color) {\r\n      // enemy.IsAlive = false;\r\n      this.RemoveFigureAt(acceptedPosition);\r\n      // this.checkKing(enemy);\r\n    }\r\n    this.FieldReserved[curFigure.Position.X][curFigure.Position.Y] = new Field(\r\n      false,\r\n      false\r\n    );\r\n    if (!curFigure.Color)\r\n      this.FieldReserved[acceptedPosition.X][acceptedPosition.Y] = new Field(\r\n        true,\r\n        false\r\n      );\r\n    else\r\n      this.FieldReserved[acceptedPosition.X][acceptedPosition.Y] = new Field(\r\n        false,\r\n        true\r\n      );\r\n\r\n    curFigure.Position = acceptedPosition;\r\n    curFigure.IsPassed = true;\r\n  }\r\n\r\n  GetMoves(currentFigPosition) {\r\n    let o = this.GetFigureAt(currentFigPosition);\r\n    if (o != null) {\r\n      switch (o.Dignity) {\r\n        case EDignity.Pawn:\r\n          return this.PawnMove(this.FieldReserved, o);\r\n        case EDignity.Knight:\r\n          return o.GetFigureMoves(\r\n            this.SizeArr,\r\n            o.Color,\r\n            EMoveType.Knight,\r\n            o.Position,\r\n            this.FieldReserved\r\n          );\r\n        case EDignity.Queen:\r\n          var arr = o.GetFigureMoves(\r\n            this.SizeArr,\r\n            o.Color,\r\n            EMoveType.Diagonal,\r\n            o.Position,\r\n            this.FieldReserved\r\n          );\r\n          arr.push(\r\n            ...o.GetFigureMoves(\r\n              this.SizeArr,\r\n              o.Color,\r\n              EMoveType.Horisontal,\r\n              o.Position,\r\n              this.FieldReserved\r\n            )\r\n          );\r\n          return arr;\r\n        case EDignity.Bishop:\r\n          return o.GetFigureMoves(\r\n            this.SizeArr,\r\n            o.Color,\r\n            EMoveType.Diagonal,\r\n            o.Position,\r\n            this.FieldReserved\r\n          );\r\n        case EDignity.Rook:\r\n          return o.GetFigureMoves(\r\n            this.SizeArr,\r\n            o.Color,\r\n            EMoveType.Horisontal,\r\n            o.Position,\r\n            this.FieldReserved\r\n          );\r\n        case EDignity.King:\r\n          return this.KingMove(this.FieldReserved, o);\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getSizeArray(figure, stepLengthX, stepLengthY) {\r\n    let minX = figure.Position.X > 0 ? figure.Position.X - stepLengthX : 0,\r\n      maxX = figure.Position.X < 7 ? figure.Position.X + stepLengthX : 7,\r\n      minY = figure.Position.Y > 0 ? figure.Position.Y - stepLengthY : 0,\r\n      maxY = figure.Position.Y < 7 ? figure.Position.Y + stepLengthY : 7;\r\n    return [minX, maxX, minY, maxY];\r\n  }\r\n\r\n  GetAcceptedRoqueKingMoves(moves, figure, minX, maxX, arrPosition) {\r\n    let clearPath = [];\r\n    let Y = figure.Position.Y;\r\n\r\n    clearPath = figure.GetFigureMoves(\r\n      [minX, maxX, Y, Y],\r\n      figure.Color,\r\n      EMoveType.Horisontal,\r\n      figure.Position,\r\n      this.FieldReserved\r\n    );\r\n    if (this.checkRoque(figure, moves[moves.length])) {\r\n      moves.push(...clearPath);\r\n      this.roqueAcceptedMoves[arrPosition] = moves[moves.length];\r\n      figure.IsRoque = true;\r\n    }\r\n  }\r\n\r\n  KingMove(list, figure) {\r\n    let arr = this.getSizeArray(figure, 1, 1),\r\n      moves = [],\r\n      clearPath = [],\r\n      minX = arr[0],\r\n      maxX = arr[1],\r\n      minY = arr[2],\r\n      maxY = arr[3];\r\n\r\n    if (!figure.IsPassed) {\r\n      this.roqueAcceptedMoves = [\r\n        new FigurePosition(-99, -99),\r\n        new FigurePosition(-99, -99),\r\n      ];\r\n      moves = figure.GetFigureMoves(\r\n        [minX, maxX, minY, maxY],\r\n        figure.Color,\r\n        EMoveType.Diagonal,\r\n        figure.Position,\r\n        this.FieldReserved\r\n      );\r\n      moves.push(\r\n        ...figure.GetFigureMoves(\r\n          [minX, maxX, minY, maxY],\r\n          figure.Color,\r\n          EMoveType.Horisontal,\r\n          figure.Position,\r\n          this.FieldReserved\r\n        )\r\n      );\r\n\r\n      if (this.checkClearPath(figure, true)) {\r\n        this.GetAcceptedRoqueKingMoves(\r\n          moves,\r\n          figure,\r\n          figure.Position.X - 2,\r\n          figure.Position.X,\r\n          0\r\n        );\r\n      }\r\n      if (this.checkClearPath(figure, false)) {\r\n        this.GetAcceptedRoqueKingMoves(\r\n          moves,\r\n          figure,\r\n          figure.Position.X,\r\n          figure.Position.X + 2,\r\n          1\r\n        );\r\n      }\r\n    } else {\r\n      moves = figure.GetFigureMoves(\r\n        [minX, maxX, minY, maxY],\r\n        figure.Color,\r\n        EMoveType.Diagonal,\r\n        figure.Position,\r\n        this.FieldReserved\r\n      );\r\n      moves.push(\r\n        ...figure.GetFigureMoves(\r\n          [minX, maxX, minY, maxY],\r\n          figure.Color,\r\n          EMoveType.Horisontal,\r\n          figure.Position,\r\n          this.FieldReserved\r\n        )\r\n      );\r\n    }\r\n    return moves;\r\n  }\r\n\r\n  checkClearPath(figure, left) {\r\n    return left\r\n      ? this.checkSide(figure, 0, figure.Position.X, figure.Position.Y, 3)\r\n      : this.checkSide(figure, figure.Position.X, 7, figure.Position.Y, 2);\r\n  }\r\n\r\n  checkSide(figure, min, max, Y, count) {\r\n    let moves = figure.GetFigureMoves(\r\n      [min, max, Y, Y],\r\n      figure.Color,\r\n      EMoveType.Horisontal,\r\n      figure.Position,\r\n      this.FieldReserved\r\n    );\r\n    if (moves.length == count) return true;\r\n    else return false;\r\n  }\r\n\r\n  getRoquePosition(king, rook) {\r\n    let kingPosition, rookPosition;\r\n    if (rook.Position.X == 7) {\r\n      kingPosition = new FigurePosition(king.Position.X + 2, king.Position.Y);\r\n      rookPosition = new FigurePosition(rook.Position.X - 2, rook.Position.Y);\r\n    } else {\r\n      kingPosition = new FigurePosition(king.Position.X - 2, king.Position.Y);\r\n      rookPosition = new FigurePosition(rook.Position.X + 3, rook.Position.Y);\r\n    }\r\n    return [kingPosition, rookPosition];\r\n  }\r\n\r\n  checkRoque(king, position) {\r\n    let rook;\r\n    let flag = false;\r\n    if (position.X < king.Position.X)\r\n      rook = this.GetFigureAt(new FigurePosition(0, king.Position.Y));\r\n    else rook = this.GetFigureAt(new FigurePosition(7, king.Position.Y));\r\n    if (rook != null) {\r\n      if (!king.IsPassed && !rook.IsPassed) {\r\n        flag = true;\r\n      }\r\n    }\r\n    return flag;\r\n  }\r\n\r\n  PawnMove(list, figure) {\r\n    let arr = this.getSizeArray(figure, 1, 1),\r\n      minX = arr[0],\r\n      maxX = arr[1],\r\n      minY = arr[2],\r\n      maxY = arr[3],\r\n      moves = [],\r\n      leftAttack,\r\n      rightAttack,\r\n      sizeForMove,\r\n      fieldArr;\r\n    if (!figure.Color) {\r\n      leftAttack = [minX, figure.Position.X, minY, figure.Position.Y];\r\n      rightAttack = [figure.Position.X, maxX, minY, figure.Position.Y];\r\n      sizeForMove = [\r\n        figure.Position.X,\r\n        figure.Position.X,\r\n        minY,\r\n        figure.Position.Y,\r\n      ];\r\n      fieldArr = [\r\n        list[minX][minY],\r\n        list[maxX][minY],\r\n        list[figure.Position.X][minY],\r\n      ];\r\n    } else {\r\n      leftAttack = [minX, figure.Position.X, figure.Position.Y, maxY];\r\n      rightAttack = [figure.Position.X, maxX, figure.Position.Y, maxY];\r\n      sizeForMove = [\r\n        figure.Position.X,\r\n        figure.Position.X,\r\n        figure.Position.Y,\r\n        maxY,\r\n      ];\r\n      fieldArr = [\r\n        list[minX][maxY],\r\n        list[maxX][maxY],\r\n        list[figure.Position.X][maxY],\r\n      ];\r\n    }\r\n\r\n    this.checkEnemy(\r\n      figure,\r\n      moves,\r\n      leftAttack,\r\n      rightAttack,\r\n      sizeForMove,\r\n      fieldArr,\r\n      list\r\n    );\r\n\r\n    if (!figure.IsPassed) {\r\n      this.pawnTwoStep(moves, figure, list);\r\n    }\r\n    return moves.flat();\r\n  }\r\n\r\n  pawnTwoStep(moves, figure, list) {\r\n    let arr = this.getSizeArray(figure, 1, 2),\r\n      minX = arr[0],\r\n      maxX = arr[1],\r\n      minY = arr[2],\r\n      maxY = arr[3],\r\n      sizeForMove = [],\r\n      fieldArr = [];\r\n    let twoSteps = [];\r\n    if (!figure.Color) {\r\n      sizeForMove = [\r\n        figure.Position.X,\r\n        figure.Position.X,\r\n        minY,\r\n        figure.Position.Y,\r\n      ];\r\n      fieldArr = [\r\n        list[figure.Position.X][minY],\r\n        list[figure.Position.X][minY + 1],\r\n      ];\r\n    } else {\r\n      sizeForMove = [\r\n        figure.Position.X,\r\n        figure.Position.X,\r\n        figure.Position.Y,\r\n        maxY,\r\n      ];\r\n      fieldArr = [\r\n        list[figure.Position.X][maxY],\r\n        list[figure.Position.X][maxY - 1],\r\n      ];\r\n    }\r\n    if (\r\n      !figure.IsEnemy(figure.Color, fieldArr[0].Reserved, fieldArr[0].Enemy) &&\r\n      !figure.IsEnemy(figure.Color, fieldArr[1].Reserved, fieldArr[1].Enemy)\r\n    ) {\r\n      twoSteps = figure.GetFigureMoves(\r\n        sizeForMove,\r\n        figure.Color,\r\n        EMoveType.Horisontal,\r\n        figure.Position,\r\n        list\r\n      );\r\n      moves.push(...twoSteps);\r\n    }\r\n  }\r\n\r\n  checkEnemy(\r\n    figure,\r\n    moves,\r\n    leftAttack,\r\n    rightAttack,\r\n    sizeForMove,\r\n    fieldArr,\r\n    list\r\n  ) {\r\n    let fig = figure.IsEnemy(false, false, false);\r\n    if (figure.IsEnemy(figure.Color, fieldArr[0].Reserved, fieldArr[0].Enemy))\r\n      moves.push(\r\n        figure.GetFigureMoves(\r\n          leftAttack,\r\n          figure.Color,\r\n          EMoveType.Diagonal,\r\n          figure.Position,\r\n          list\r\n        )\r\n      );\r\n    if (figure.IsEnemy(figure.Color, fieldArr[1].Reserved, fieldArr[1].Enemy))\r\n      moves.push(\r\n        figure.GetFigureMoves(\r\n          rightAttack,\r\n          figure.Color,\r\n          EMoveType.Diagonal,\r\n          figure.Position,\r\n          list\r\n        )\r\n      );\r\n    if (!figure.IsEnemy(figure.Color, fieldArr[2].Reserved, fieldArr[2].Enemy))\r\n      moves.push(\r\n        ...figure.GetFigureMoves(\r\n          sizeForMove,\r\n          figure.Color,\r\n          EMoveType.Horisontal,\r\n          figure.Position,\r\n          list\r\n        )\r\n      );\r\n    return moves;\r\n  }\r\n}\r\n\r\n//create move type for figure\r\nconst EMoveType = Object.freeze({\r\n  Horisontal: 0,\r\n  Diagonal: 1,\r\n  Knight: 2,\r\n});\r\n\r\n//create type of figure\r\nconst EDignity = Object.freeze({\r\n  Pawn: 1,\r\n  Knight: 2,\r\n  Bishop: 3,\r\n  Rook: 4,\r\n  Queen: 5,\r\n  King: 6,\r\n});\r\n\r\nclass Field {\r\n  constructor(_reserved, _enemy) {\r\n    this.Reserved = _reserved;\r\n    this.Enemy = _enemy;\r\n  }\r\n}\r\n\r\nclass FigurePosition {\r\n  constructor(_x, _y) {\r\n    this.x = _x;\r\n    this.y = _y;\r\n    // X(_x);\r\n    // Y = y;\r\n  }\r\n\r\n  get X() {\r\n    return this.x;\r\n  }\r\n  set X(_x) {\r\n    this.x = _x;\r\n  }\r\n  get Y() {\r\n    return this.y;\r\n  }\r\n  set Y(_y) {\r\n    this.y = _y;\r\n  }\r\n\r\n  unequal(c1, c2) {\r\n    return c1.X != c2.X || c1.Y != c2.Y;\r\n  }\r\n\r\n  equal(c1, c2) {\r\n    return c1.X == c2.X && c1.Y == c2.Y;\r\n  }\r\n}\r\n\r\nclass Figure {\r\n  constructor(color, isAlive, dignity, isPassed, position) {\r\n    this.Color = color;\r\n    this.IsAlive = isAlive;\r\n    this.Dignity = dignity;\r\n    this.Position = position;\r\n    this.IsPassed = isPassed;\r\n  }\r\n\r\n  Figure(_figure) {\r\n    this.Color = _figure.Color;\r\n    this.IsAlive = _figure.IsAlive;\r\n    this.Dignity = _figure.Dignity;\r\n    this.Position = _figure.Position;\r\n    this.IsPassed = _figure.IsPassed;\r\n  }\r\n\r\n  Plus = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    if (firstArg <= firstCondition) {\r\n      firstArg = firstArg + 1;\r\n      this.changeItem.Start = this.changeItem.Start + 1;\r\n    }\r\n    // return [firstArg <= firstCondition, firstArg, secondArg];\r\n    return firstArg <= firstCondition;\r\n  };\r\n\r\n  Minus = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    if (firstArg >= firstCondition) {\r\n      firstArg = firstArg - 1;\r\n      this.changeItem.Start = this.changeItem.Start - 1;\r\n    }\r\n    // return [firstArg >= firstCondition, firstArg, secondArg];\r\n    return firstArg >= firstCondition;\r\n  };\r\n\r\n  KnightMoves = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    let flag = 0 <= firstCondition && secondCondition <= 7;\r\n    return (\r\n      0 <= firstCondition &&\r\n      7 >= firstCondition &&\r\n      0 <= secondCondition &&\r\n      7 >= secondCondition\r\n    );\r\n  };\r\n\r\n  RightTop = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    firstArg = firstArg + 1;\r\n    secondArg = secondArg - 1;\r\n    this.changeItem.Start = this.changeItem.Start + 1;\r\n    this.changeItem.Unchanged = this.changeItem.Unchanged - 1;\r\n    let flag = firstArg <= firstCondition && secondArg >= secondCondition;\r\n    return flag;\r\n  };\r\n\r\n  LeftTop = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    this.changeItem.Start = this.changeItem.Start - 1;\r\n    this.changeItem.Unchanged = this.changeItem.Unchanged - 1;\r\n    firstArg = firstArg - 1;\r\n    secondArg = secondArg - 1;\r\n    let flag = firstArg >= firstCondition && secondArg >= secondCondition;\r\n    return flag;\r\n  };\r\n\r\n  RightBottom = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    let kek = this.changeItem.Start;\r\n    kek = kek + 1;\r\n    this.changeItem.Start = this.changeItem.Start + 1;\r\n    this.changeItem.Unchanged = this.changeItem.Unchanged + 1;\r\n    firstArg = firstArg + 1;\r\n    secondArg = secondArg + 1;\r\n    let flag = firstArg <= firstCondition && secondArg <= secondCondition;\r\n    return flag;\r\n  };\r\n\r\n  LeftBottom = (firstCondition, secondCondition, firstArg, secondArg) => {\r\n    this.changeItem.Start = this.changeItem.Start - 1;\r\n    this.changeItem.Unchanged = this.changeItem.Unchanged + 1;\r\n    firstArg = firstArg - 1;\r\n    secondArg = secondArg + 1;\r\n    let flag = firstArg >= firstCondition && secondArg <= secondCondition;\r\n    return flag;\r\n  };\r\n\r\n  IsEnemy(color, a, b) {\r\n    if (!color) {\r\n      if (!a && b) return true;\r\n    } else {\r\n      if (a && !b) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  IsEmptyCell(cell) {\r\n    return !cell.Reserved && !cell.Enemy;\r\n  }\r\n\r\n  GetListOfMoves(\r\n    minStepX,\r\n    maxStepX,\r\n    minStepY,\r\n    maxStepY,\r\n    color,\r\n    figurePosition,\r\n    flag\r\n  ) {\r\n    switch (flag) {\r\n      case 0:\r\n        return [\r\n          new Element(this.Plus, figurePosition, maxStepY, 0, 1),\r\n          new Element(this.Minus, figurePosition, minStepY, 0, 1),\r\n          new Element(this.Plus, figurePosition, maxStepX, 0, 0),\r\n          new Element(this.Minus, figurePosition, minStepX, 0, 0),\r\n        ];\r\n      case 1:\r\n        return [\r\n          new Element(this.RightTop, figurePosition, maxStepX, minStepY, 0),\r\n          new Element(this.LeftTop, figurePosition, minStepX, minStepY, 0),\r\n          new Element(this.RightBottom, figurePosition, maxStepX, maxStepY, 0),\r\n          new Element(this.LeftBottom, figurePosition, minStepX, maxStepY, 0),\r\n        ];\r\n      case 2:\r\n        return [\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X + 1,\r\n            figurePosition.Y + 2,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X - 1,\r\n            figurePosition.Y + 2,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X + 1,\r\n            figurePosition.Y - 2,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X - 1,\r\n            figurePosition.Y - 2,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X + 2,\r\n            figurePosition.Y - 1,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X - 2,\r\n            figurePosition.Y - 1,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X + 2,\r\n            figurePosition.Y + 1,\r\n            2\r\n          ),\r\n          new Element(\r\n            this.KnightMoves,\r\n            figurePosition,\r\n            figurePosition.X - 2,\r\n            figurePosition.Y + 1,\r\n            2\r\n          ),\r\n        ];\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  GetFigureMoves(array, color, TypeOfMove, figurePosition, reservedCell) {\r\n    let Moves = [];\r\n    let cell = '';\r\n    let enemy = false,\r\n      flag = false;\r\n    let i = 0,\r\n      j = 0;\r\n    let list = this.GetListOfMoves(\r\n      array[0],\r\n      array[1],\r\n      array[2],\r\n      array[3],\r\n      color,\r\n      figurePosition,\r\n      TypeOfMove\r\n    );\r\n\r\n    for (let counter = 0; counter < list.length; counter++) {\r\n      let increment = list[counter].TypeOfIncrement;\r\n      this.changeItem = list[counter];\r\n      while (\r\n        increment(\r\n          list[counter].FirstCondition,\r\n          list[counter].SecondCondition,\r\n          list[counter].Start,\r\n          list[counter].Unchanged\r\n        )\r\n      ) {\r\n        list[counter].InitXY();\r\n        i = list[counter].X;\r\n        j = list[counter].Y;\r\n        if (\r\n          figurePosition.X == list[counter].X &&\r\n          figurePosition.Y == list[counter].Y\r\n        )\r\n          continue;\r\n        cell = reservedCell[i][j];\r\n        if (cell == null) break;\r\n        flag = this.IsEmptyCell(cell);\r\n        enemy = this.IsEnemy(color, cell.Reserved, cell.Enemy);\r\n        if (flag || enemy) {\r\n          Moves.push(new FigurePosition(i, j));\r\n          if (enemy) break;\r\n        } else break;\r\n      }\r\n    }\r\n    let rez = Moves.flat();\r\n    return Moves.flat();\r\n  }\r\n}\r\n\r\nclass Element {\r\n  // public Increment TypeOfIncrement { get; set; }\r\n  // public int Unchanged = 0;\r\n  // public int Start = 0;\r\n  // private bool flag=true;\r\n  // private FigurePosition Figure;\r\n  // public int FirstCondition { get; set; }\r\n  // public int SecondCondition { get; set; }\r\n  // public int TypeOfMove { get; set; }\r\n  // public int X { get; set; }\r\n  // public int Y { get; set; }\r\n\r\n  constructor(\r\n    typeOfIncrement,\r\n    figure,\r\n    firstConditon,\r\n    secondCondition,\r\n    typeOfMove\r\n  ) {\r\n    this.flag = true;\r\n    this.TypeOfIncrement = typeOfIncrement;\r\n    this.Figure = figure;\r\n    this.FirstCondition = firstConditon;\r\n    this.SecondCondition = secondCondition;\r\n    this.TypeOfMove = typeOfMove;\r\n    this.Init(this.TypeOfMove);\r\n  }\r\n\r\n  GetKnightMoves() {\r\n    if (this.flag) {\r\n      this.X = this.FirstCondition;\r\n      this.Y = this.SecondCondition;\r\n      this.FirstCondition = -999;\r\n      this.SecondCondition = -999;\r\n      this.flag = false;\r\n    } else {\r\n      this.FirstCondition = -999;\r\n      this.SecondCondition = -999;\r\n    }\r\n  }\r\n\r\n  Init(i) {\r\n    switch (i) {\r\n      case 0: {\r\n        this.Start = this.Figure.X;\r\n        this.Unchanged = this.Figure.Y;\r\n        break;\r\n      }\r\n      case 1: {\r\n        this.Unchanged = this.Figure.X;\r\n        this.Start = this.Figure.Y;\r\n        break;\r\n      }\r\n      case 2: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  InitXY() {\r\n    switch (this.TypeOfMove) {\r\n      case 0: {\r\n        this.X = this.Start;\r\n        this.Y = this.Unchanged;\r\n        break;\r\n      }\r\n      case 1: {\r\n        this.X = this.Unchanged;\r\n        this.Y = this.Start;\r\n        break;\r\n      }\r\n      case 2: {\r\n        this.GetKnightMoves();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar Game = new ChessFigure();\r\nvar GameAi = new ChessFigure();\r\nvar cellObj = new CurrentCell();\r\nGame.ChessFigure();\r\nlet mes = Game.figureArray;\r\n// let werwerwer = Game.ChessFigure();\r\ncellObj.Game = Game;\r\n// let fig = mes[1];\r\n// var ai = new ChessAI(Game);\r\n// let bestMoveFound = ai.MiniaxRoot(2, true);\r\n\r\n// Game.MoveCurrentFigure(bestMoveFound.Figure.Position, bestMoveFound.Position);\r\n\r\nfunction transformToId(position) {\r\n  return 'cell-' + position.Y + '' + position.X;\r\n}\r\n\r\nfunction getCoordAnim(a, b) {\r\n  coord = { x: '', y: '' };\r\n  let width = (b.offsetWidth - a.offsetWidth) / 2;\r\n  let height = (b.offsetHeight - a.offsetHeight) / 2;\r\n\r\n  let x = a.offsetLeft - b.offsetLeft - width;\r\n  let y = a.offsetTop - b.offsetTop - height;\r\n  coord.x = a.offsetLeft > b.offsetLeft ? -x : Math.abs(x); // /-\r\n  coord.y = a.offsetTop > b.offsetTop ? -y : Math.abs(y);\r\n  // alert(\"a \" + a.offsetTop + \" b\" + b.offsetTop);\r\n  return coord;\r\n}\r\n\r\nfunction animateElement(currentFigPosition, acceptedPosition) {\r\n  let a = transformToId(currentFigPosition),\r\n    b = transformToId(acceptedPosition);\r\n\r\n  let animEl = document.getElementById(a).getElementsByClassName('figure')[0];\r\n  let destination = document.getElementById(b);\r\n\r\n  let coord = getCoordAnim(animEl, destination);\r\n  let { x, y } = coord;\r\n  cellObj.Turn = false;\r\n  let animation = animEl.animate(\r\n    [\r\n      // keyframes\r\n      { transform: 'translate3D(0, 0, 0)' },\r\n      { transform: `translate3D(${x}px, ${y}px, 0)` },\r\n    ],\r\n    {\r\n      // timing options\r\n      duration: 300,\r\n      // iterations: Infinity,\r\n    }\r\n  );\r\n\r\n  return animation;\r\n  animation.onfinish = () => {\r\n    moveElement(currentFigPosition, acceptedPosition);\r\n  };\r\n}\r\n\r\nfunction moveAi() {\r\n  var ai = new ChessAI(Game);\r\n  let bestMoveFound = ai.MiniaxRoot(1, true);\r\n\r\n  let animation = animateElement(\r\n    bestMoveFound.Figure.Position,\r\n    bestMoveFound.Position\r\n  );\r\n  animation.onfinish = () => {\r\n    moveElement(bestMoveFound.Figure.Position, bestMoveFound.Position);\r\n    cellObj.clearObject();\r\n  };\r\n\r\n  // Game.MoveCurrentFigure(bestMoveFound.Figure.Position, bestMoveFound.Position);\r\n  // document.getElementById(\"div1\").appendChild(makeUL(Game.FieldReserved));\r\n  // DrawChess();\r\n}\r\n\r\nfunction getFigureImg(dignity, color) {\r\n  let className = '';\r\n  switch (dignity) {\r\n    case 1:\r\n      className = 'pawn';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n    case 2:\r\n      className = 'knight';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n    case 3:\r\n      className = 'bishop';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n    case 4:\r\n      className = 'rook';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n    case 5:\r\n      className = 'queen';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n    case 6:\r\n      className = 'king';\r\n      color ? (className += '--black') : (className += '--white');\r\n      break;\r\n  }\r\n  return className;\r\n}\r\n\r\nfunction drawFigure(item, f, i, j) {\r\n  var figureBlock = document.createElement('div');\r\n  if (f.Position.X == j && f.Position.Y == i) {\r\n    // figureBlock.appendChild(\r\n    //   document.createTextNode(f.Position.X + \"\" + f.Position.Y + \"\" + f.Dignity)\r\n    // );\r\n    figureBlock.classList.add('figure', getFigureImg(f.Dignity, f.Color));\r\n    item.classList.add('cell--reserved');\r\n    !f.Color ? item.classList.add('player') : 0;\r\n    // f.Position.X == j && f.Position.Y == i && f.Color\r\n    //   ? figureBlock.appendChild(document.createTextNode(\" b\"))\r\n    //   : 0;\r\n    item.appendChild(figureBlock);\r\n  }\r\n}\r\n\r\nfunction drawField() {\r\n  var list = document.createElement('ul');\r\n  list.id = 'field';\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 0; j < 8; j++) {\r\n      var item = document.createElement('li');\r\n      item.classList.add('cell');\r\n      if ((i + j) % 2 == 0) {\r\n        item.classList.add('cell--dark');\r\n      }\r\n      mes.forEach((f) => {\r\n        drawFigure(item, f, i, j);\r\n      });\r\n      item.id = 'cell-' + i + '' + j;\r\n\r\n      list.appendChild(item);\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\nfunction writeFieldList() {\r\n  const myNode = document.getElementById('listField');\r\n  myNode.textContent = '';\r\n  let array = Game.FieldReserved;\r\n  let desc = '';\r\n  for (var i = 0; i < array.length; i++) {\r\n    var list = document.createElement('ul');\r\n    for (var j = 0; j < array.length; j++) {\r\n      desc = document.createElement('p');\r\n\r\n      desc.appendChild(\r\n        document.createTextNode(\r\n          'Reserved ' + array[i][j].Reserved + ' Enemy ' + array[i][j].Enemy\r\n        )\r\n      );\r\n      list.appendChild(desc);\r\n    }\r\n    document.getElementById('listField').appendChild(list);\r\n  }\r\n  document.getElementById('listField').appendChild(desc);\r\n}\r\nfunction writeFigureList() {\r\n  const myNode = document.getElementById('listFigures');\r\n  myNode.textContent = '';\r\n  for (let i = 0; i < Game.figureArray.length; i++) {\r\n    let desc = document.createElement('p');\r\n    desc.appendChild(\r\n      document.createTextNode(\r\n        Game.figureArray[i].IsAlive +\r\n          ' ' +\r\n          Game.figureArray[i].Color +\r\n          ' XY' +\r\n          Game.figureArray[i].Position.X +\r\n          ' ' +\r\n          Game.figureArray[i].Position.Y +\r\n          ' ' +\r\n          Game.figureArray[i].Dignity\r\n      )\r\n    );\r\n    document.getElementById('listFigures').appendChild(desc);\r\n  }\r\n}\r\n\r\nvar flag = false;\r\nvar curFig = '';\r\nvar aMoves = [];\r\n\r\nvar regCell = new RegExp('\\\\d+');\r\n\r\nfunction moveElement(currentFigPosition, acceptedPosition) {\r\n  Game.MoveCurrentFigure(currentFigPosition, acceptedPosition);\r\n  document.getElementById('field').remove();\r\n  document.getElementById('div1').appendChild(drawField());\r\n}\r\n\r\nfunction checkMovesList(acceptedPosition) {\r\n  let checkMove = false;\r\n  for (let i = 0; i < aMoves.length; i++) {\r\n    if (aMoves[i].X == acceptedPosition.X && aMoves[i].Y == acceptedPosition.Y)\r\n      checkMove = true;\r\n  }\r\n  return checkMove;\r\n}\r\n\r\nfunction drawMoves(array) {\r\n  console.log(array);\r\n  if (array.length != 0) {\r\n    for (let i = 0; i < array.length; i++) {\r\n      let pos = 'cell-' + array[i].Y + '' + array[i].X;\r\n      console.log(pos);\r\n      let li = document.getElementById(pos);\r\n      li.classList.add('aMove');\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction showActiveCell(text) {\r\n  let cell = document.getElementById(text);\r\n  cell.classList.add('activeCell');\r\n}\r\n\r\ndocument.getElementById('div1').appendChild(drawField(Game.FieldReserved));\r\n// document.getElementById(\"div1\").appendChild(makeUL(Game.FieldReserved));\r\n\r\nwindow.onclick = (e) => {\r\n  console.log(\r\n    'cell? ' + e.target.parentNode.id + regCell.test(e.target.parentNode.id)\r\n  );\r\n  console.log(e.target.parentNode.classList[0] == 'cell');\r\n\r\n  if (cellObj.Turn) {\r\n    if (cellObj.testIfCell(e)) {\r\n      if (cellObj.SelectedFigure != null) {\r\n        showActiveCell(cellObj.ActiveIdCell);\r\n        if (!cellObj.AllowedToMove) {\r\n          cellObj.checkMovesList();\r\n          aMoves = drawMoves(cellObj.MovesList);\r\n          cellObj.AllowedToMove = true;\r\n        } else if (cellObj.checkMovesList()) {\r\n          let animation = animateElement(\r\n            cellObj.SelectedFigure.Position,\r\n            cellObj.ClickedCell\r\n          );\r\n          animation.onfinish = () => {\r\n            moveElement(cellObj.SelectedFigure.Position, cellObj.ClickedCell);\r\n            cellObj.clearObject();\r\n\r\n            moveAi();\r\n          };\r\n          // moveElement(cellObj.SelectedFigure.Position, cellObj.ClickedCell);\r\n          // cellObj.clearObject();\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["ChessAI","constructor","figures","this","price","stepCount","Figures","JSON","parse","stringify","BestPices","AllPices","copyArr","push","MiniaxRoot","depth","color","bestMove","bestMoveFound","ChessFigure","FM","ChessFigureAi","GetAllFiguresMoves","rand","Math","floor","random","length","i","Figure","Color","newGameMove","FiguresMoves","Position","MoveCurrentFigure","value","Minimax","Undo","GetFigureAt","fig","Maximaise","EvaluateBoard","max","min","figArr","totalEvaluation","figureArray","IsAlive","GetPieceValue","f","Dignity","figure","position","array","getFigureAttr","FigurePosition","X","Y","_figure","IsPassed","MAX_SIZE","FieldReserved","roqueAcceptedMoves","copyFigureArray","copyFieldReserved","DignitysArray","SizeArr","pos","x","y","makeDeepFigure","copy","makeDeepField","row","Ai","DeepCopyField","DeepCopyFigure","k","Field","InitFigArray","darkColor","findStart","start","allMoves","getTrueStart","count","moves","GetMoves","j","reserved","enemy","ArrayFig","EDignity","Pawn","second","first","currentFigPosition","RemoveFigureAt","check1","check2","check3","splice","Roque","curFigure","acceptedPosition","IsRoque","rook","roquePosition","getRoquePosition","moveFigure","o","PawnMove","Knight","GetFigureMoves","EMoveType","Queen","arr","Diagonal","Horisontal","Bishop","Rook","King","KingMove","getSizeArray","stepLengthX","stepLengthY","GetAcceptedRoqueKingMoves","minX","maxX","arrPosition","clearPath","checkRoque","list","minY","maxY","checkClearPath","left","checkSide","king","kingPosition","rookPosition","flag","leftAttack","rightAttack","sizeForMove","fieldArr","checkEnemy","pawnTwoStep","flat","twoSteps","IsEnemy","Reserved","Enemy","Object","freeze","_reserved","_enemy","_x","_y","unequal","c1","c2","equal","isAlive","dignity","isPassed","Plus","firstCondition","secondCondition","firstArg","secondArg","changeItem","Start","Minus","KnightMoves","RightTop","Unchanged","LeftTop","RightBottom","kek","LeftBottom","a","b","IsEmptyCell","cell","GetListOfMoves","minStepX","maxStepX","minStepY","maxStepY","figurePosition","Element","TypeOfMove","reservedCell","Moves","counter","increment","TypeOfIncrement","FirstCondition","SecondCondition","InitXY","typeOfIncrement","firstConditon","typeOfMove","Init","GetKnightMoves","Game","cellObj","CurrentCell","MovesList","MovesFlag","Turn","AllowedToMove","FieldList","FigureList","ClickedIdCell","ClickedCell","ActiveIdCell","SelectedFigure","FlagIfFigure","RegCell","RegExp","clearObject","transformToPosition","element","coord","split","parseInt","setClickedIdCell","setActiveIdCell","setFigure","buf","testElement","e","target","parentNode","classList","id","test","testIfCell","checkIfFigure","filter","item","comparePositions","checkMovesList","checkMove","mes","transformToId","getCoordAnim","width","offsetWidth","height","offsetHeight","offsetLeft","offsetTop","abs","animateElement","animEl","document","getElementById","getElementsByClassName","animate","transform","duration","drawFigure","figureBlock","createElement","add","className","getFigureImg","appendChild","drawField","forEach","regCell","moveElement","remove","window","onclick","text","console","log","onfinish","moveAi","drawMoves","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","definition","key","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}